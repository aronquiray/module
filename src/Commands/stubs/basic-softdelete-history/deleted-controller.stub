<?php


namespace App\Http\Controllers\Backend\Core\DummyClass;

use Illuminate\Http\Request;
use HalcyonLaravel\Base\Controllers\Backend\DeletedController as Controller;
use HalcyonLaravel\Base\Repository\BaseRepository as Repository;
use App\Models\Core\DummyClass as Model;

use HalcyonLaravel\Base\Events\BaseRestoringEvent;
use HalcyonLaravel\Base\Events\BaseRestoredEvent;
use HalcyonLaravel\Base\Events\BasePurgingEvent;
use HalcyonLaravel\Base\Events\BasePurgedEvent;

use History;

/**
 * Class DummyClassesDeleteController.
 */
class DummyClassesDeletedController extends Controller
{
    /**
     * DummyClassesDeleteController Constructor
     */
    public function __construct(Model $model)
    {
        $this->model = $model;
        $this->repo = new Repository($model);
        $this->_initRepositoryObservers();
        $this->route_path = Model::routeAdminPath;
        $this->view_path = Model::viewBackendPath;
    }

    /**
     * Specify Model class name.
     *
     * @return mixed
     */
    public function model()
    {
        return Model::class;
    }

    /**
     *  Available observers can costumise:
        'restoring', 'restored',
        'purging', 'purged',
     *
     * add custome logic on functions
     *
     *
     * You can comment/uncomment one of them,
     * it will run default bahavior if commented on base class.
     *
     * @author lloricode@gmail.com
     */
    private function _initRepositoryObservers()
    {
        // $this->repo->restoring = function ($model)
        // {
        //     event(new BaseRestoringEvent);
        //     // dd($model);
        //     return $model;
        // };
        $this->repo->restored = function ($model) {
            event(new BaseRestoredEvent);
            History::restored($model);
            // dd($model);
            return $model;
        };
        // $this->repo->purging = function ($model)
        // {
        //     event(new BasePurgingEvent);
        //     // dd($model);
        //     return $model;
        // };
        $this->repo->purged = function ($model) {
            event(new BasePurgedEvent);
            History::purged($model);
            // dd($model);
            return $model;
        };
    }
}
