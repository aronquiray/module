<?php

namespace Tests\Feature\Modules\Backend;

use Tests\TestCase;
use Illuminate\Foundation\Testing\RefreshDatabase;

use HalcyonLaravel\Base\Events\BaseStoringEvent;
use HalcyonLaravel\Base\Events\BaseStoredEvent;
use HalcyonLaravel\Base\Events\BaseUpdatingEvent;
use HalcyonLaravel\Base\Events\BaseUpdatedEvent;

use App\Models\DummyClass as Model;


/**
 * Class DummyClassBreadFeatureBackendTest.
 */
class DummyClassBreadFeatureBackendTest extends TestCase
{
    use RefreshDatabase;

    public function setUp()
    {
        parent::setUp();
        $this->loginAsAdmin();
        (new \DummyClassPermissionTableSeeder)->run();
        (new \DummyClassTableSeeder)->run();
    }

    /** @test */
    public function testStore()
    {        

        $this->expectsEvents(BaseStoringEvent::class);
        $this->expectsEvents(BaseStoredEvent::class);

        $response = $this->withHeaders([
            'X-Header' => 'Value',
        ])->json('POST', route('admin.dummy-class.store'), [
            'title' => 'Salliess',
        ]);

        $model =  Model::orderBy('id', 'desc')->first();
       
        $response
            ->assertStatus(302)
            ->assertSessionHas('flash_success', 'Salliess has been created.')
            ->assertRedirect(route('admin.dummy-class.show', $model));

        $this->assertDatabaseHas((new Model)->getTable(), [
            'title' => 'Salliess',
        ]);
 
    }

    public function testUpdate()
    {
        $model = Model::create([
            'title' => 'old Salliess',
        ]);

        $dataNew = [
            'title' => 'new Salliess',
        ];


        $this->expectsEvents(BaseUpdatingEvent::class);
        $this->expectsEvents(BaseUpdatedEvent::class);

        $response = $this->withHeaders([
            'X-Header' => 'Value',
        ])->json('PUT', route('admin.dummy-class.update', $model), $dataNew);
       
        // get the updated data
        $model = Model::find($model->id);

        $response
            ->assertStatus(302)
            ->assertSessionHas('flash_success', 'new Salliess has been updated.')
            ->assertRedirect(route('admin.dummy-class.show', $model));

        $this->assertDatabaseHas((new Model)->getTable(), $dataNew);
    }
}
