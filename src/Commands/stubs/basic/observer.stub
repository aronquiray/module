<?php

namespace DummyNameSpaceClass\Repositories\Backend\DummyPath\DummyClass;

use HalcyonLaravel\Base\Models\Contracts\BaseModel;
use HalcyonLaravel\Base\Repository\ObserverContract;

class DummyClassObserver extends ObserverContract
{

    /**
     * @param array $data
     * @return array
     */
    public static function storing(array $data): array
    {
        return $data;
    }

    /**
     * @param BaseModel $model
     * @param array $data
     * @return BaseModel
     */
    public static function stored(BaseModel $model, array $data): BaseModel
    {
        $meta = $data['meta'];
        $model->metable()->create([
            'name' => $meta['name'] ?? $model->base('source'),
            'description' => $meta['description'],
            'keywords' => $meta['keywords'],
            'user_id' => auth()->user()->id
        ]);
        return $model;
    }

    /**
     * @param BaseModel $model
     * @param array $data
     * @return BaseModel
     */
    public static function updating(BaseModel $model, array $data): BaseModel
    {
        return $model;
    }

    /**
     * @param BaseModel $model
     * @param array $data
     * @param array $oldModel
     * @return BaseModel
     */
    public static function updated(BaseModel $model, array $data, array $oldModel): BaseModel
    {
        $meta = $data['meta'];

        $model->metable()->update([
            'name' => $meta['name'] ?? $model->name,
            'description' => $meta['description'],
            'keywords' => $meta['keywords'],
            'user_id' => auth()->user()->id
        ]);

        return $model;
    }

    /**
     * @param BaseModel $model
     * @return BaseModel
     */
    public static function deleting(BaseModel $model): BaseModel
    {
        $model->metable()->delete();
        return $model;
    }

    /**
     * @param BaseModel $model
     * @return BaseModel
     */
    public static function deleted(BaseModel $model): BaseModel
    {
        return $model;
    }

    /**
     * @param BaseModel $model
     * @return BaseModel
     */
    public static function restoring(BaseModel $model): BaseModel
    {
        return $model;
    }

    /**
     * @param BaseModel $model
     * @return BaseModel
     */
    public static function restored(BaseModel $model): BaseModel
    {
        return $model;
    }

    /**
     * @param BaseModel $model
     * @return BaseModel
     */
    public static function purging(BaseModel $model): BaseModel
    {
        return $model;
    }

    /**
     * @param BaseModel $model
     * @return BaseModel
     */
    public static function purged(BaseModel $model): BaseModel
    {
        return $model;
    }
}
