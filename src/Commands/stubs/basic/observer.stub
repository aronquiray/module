<?php

namespace DummyNameSpaceClass\Repositories\Backend\DummyClass;

use HalcyonLaravel\Base\Models\Model;
use HalcyonLaravel\Base\Repository\ObserverContract;
use Log;

class DummyClassObserver extends ObserverContract
{

    private function _logging($method, $model)
    {
        if(!config('halcyon-laravel.module.save_log'))
        {
            return;
        }
        
        $modelData = print_r(is_array($model)?$model:$model->toArray(), true);
        $modelData = str_replace("\n", '', $modelData);
        Log::info("$method: $modelData");
    }

    public static function storing(array $data) :array
    {
        $this->_logging(__METHOD__, $data);
        return $data;
    }

    public static function stored(Model $model, array $data) :Model
    {
        $this->_logging(__METHOD__, $model);
        return $model;
    }

    public static function updating(Model $model, array $data) :Model
    {
        $this->_logging(__METHOD__, $model);
        return $model;
    }

    public static function updated(Model $model, array $data) :Model
    {
        $this->_logging(__METHOD__, $model);
        return $model;
    }

    public static function deleting(Model $model) :Model
    {
        $this->_logging(__METHOD__, $model);
        return $model;
    }

    public static function deleted(Model $model) :Model
    {
        $this->_logging(__METHOD__, $model);
        return $model;
    }

    public static function restoring(Model $model) :Model
    {
        $this->_logging(__METHOD__, $model);
        return $model;
    }

    public static function restored(Model $model) :Model
    {
        $this->_logging(__METHOD__, $model);
        return $model;
    }

    public static function purging(Model $model) :Model
    {
        $this->_logging(__METHOD__, $model);
        return $model;
    }

    public static function purged(Model $model) :Model
    {
        $this->_logging(__METHOD__, $model);
        return $model;
    }
}
