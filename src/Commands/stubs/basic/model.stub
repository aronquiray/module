<?php

namespace DummyNameSpaceClass\Models\DummyPath\DummyClass;

use HalcyonLaravel\Base\Models\Model as BaseModel;
use Spatie\Sluggable\SlugOptions;
use Spatie\Sluggable\HasSlug;
use HalcyonLaravel\Base\Models\Traits\ModelDefaultTraits;
use App\Models\Core\Meta\MetableTrait;
use Watson\Rememberable\Rememberable;

// Model Traits
use DummyNameSpaceClass\Models\DummyPath\DummyClass\Traits\DummyClassAttributes;
use DummyNameSpaceClass\Models\DummyPath\DummyClass\Traits\DummyClassRegularFunctions;
use DummyNameSpaceClass\Models\DummyPath\DummyClass\Traits\DummyClassRelations;
use DummyNameSpaceClass\Models\DummyPath\DummyClass\Traits\DummyClassScopes;
use DummyNameSpaceClass\Models\DummyPath\DummyClass\Traits\DummyClassStaticFunctions;

class DummyClass extends BaseModel
{
    use Rememberable;
    use MetableTrait;
    use HasSlug;
    use ModelDefaultTraits;
    use DummyClassAttributes;
    use DummyClassRegularFunctions;
    use DummyClassRelations;
    use DummyClassScopes;
    use DummyClassStaticFunctions;

    /**
     * Declared Fillables
     */
    protected $fillable = [
        'title',
        'slug',
    ];

    public const MODULE_NAME         = 'dummy class';
    public const VIEW_BACKEND_PATH    = 'backend.dummyPath.dummyClass';
    public const VIEW_FRONTEND_PATH   = 'frontend.dummyPath.dummyClass';
    public const ROUTE_ADMIN_PATH     = 'admin.dummy-path.dummy-class';
    public const ROUTE_FRONTEND_PATH  = 'frontend.dummy-path.dummy-class';
     
    /** cache tag reference to delete certaint cache */
    public const CACHE_TAG  = 'dummy_class_queries';

    public static function boot()
    {
        parent::boot();
        static::saved(function () {
            /** Delete cache on updates */
            self::flushCache(self::CACHE_TAG);
        });
        static::deleted(function () {
            /** Delete cache on updates */
            self::flushCache(self::CACHE_TAG);
        });
    }

    /**
     * Return the permissions related to this model.
     *
     * @return array
     */
    public static function permissions() : array
    {
        return [
            // table
            'index' => self::MODULE_NAME . ' list',

            // resources
            'create' => self::MODULE_NAME . ' create',
            'edit' => self::MODULE_NAME . ' edit',
            'show' => self::MODULE_NAME . ' show',
            'destroy' => self::MODULE_NAME . ' destroy',
        ];
    }

    public function getRouteKeyName()
    {
        return 'slug';
    }

    /**
     * Return the baseable source for this model.
     *
     * @return array
     */
    public function baseable() : array
    {
        return [
            'source' => 'title'
        ];
    }

    /**
     * Get the options for generating the slug.
     */
    public function getSlugOptions() : SlugOptions
    {
        return SlugOptions::create()
            ->generateSlugsFrom('title')
            ->saveSlugsTo('slug');
    }

    /**
     * Return the links related to this model.
     *
     * @return array
     */
    public function links() : array
    {
        $links =  [
            'frontend' => [
                'show' => [
                    'type' => 'show',
                    'url' => route(self::ROUTE_FRONTEND_PATH. '.show', taxonomy()->getRoute($this, $include_model = true) ?? $this)
                ]
            ],
            'backend' => [
                'index'      => [
                    'type' => 'custom',
                    'label' => 'Dummy Classes',
                    'permission' => self::permission('index'),
                    'url' => route(self::ROUTE_ADMIN_PATH.'.index')
                ],
                'show'      => [
                    'type' => 'show',
                    'permission' => self::permission('show'),
                    'url' => route(self::ROUTE_ADMIN_PATH.'.show', $this)
                ],
                'edit'      => [
                    'type' => 'edit',
                    'permission' => self::permission('edit'),
                    'url' => route(self::ROUTE_ADMIN_PATH.'.edit', $this)
                ],
                'destroy'   => [
                    'type' => 'destroy',
                    'permission' => self::permission('destroy'),
                    'url' => route(self::ROUTE_ADMIN_PATH.'.destroy', $this),
                    'group' => 'more',
                    'redirect' => route(self::ROUTE_ADMIN_PATH.'.index')
                ],
            ]
        ];
        return $links;
    }
}
